3.3.4.5
	2 1 0
	2 5 2
	2 5 2
3.3.4.6
	Partition (arr[n], start=0) 
		half = sum(originalarr) / 2
		if half is not even {
			return false
		}
		arr1 = clone of arr
		arr2 = []
		count = 1
		while count != n {
			for i = 0; i < n; i++ {
				counter = arr[i]
				move arr[i] into arr2
				if counter == half {
					return arr1 and arr2
				}
				for j = 0; j < n; j++ {
					if j == i {
						continue
					}
					if j + count > n {
						break
					}
					for x = 0; x < count; x++ {
						counter = counter + arr[j+x]
						move arr[j+x] into arr2
					}
					if counter == half {
						return arr1 and arr2
					}
					counter = arr[i]

					// Reset arr2 and arr1
					clear arr2
					clone arr into arr1
					// Set arr2 back to what it was before the loop
					move arr[i] into arr2
				}
				// Reset arr1 and arr2
				clear arr2
				clone arr into arr1
			}
			count++
		}
3.3.4.9
	a
		magic square consists of n rows and each row adding up to a certain number. lets call this number s
		the total area of the square would be n*s because width * height
		we also know that the square contains the numbers 1 2 3 ... n^2
		
		ns = 1 + ... + n^2
		use summation rule
		ns = n^2 ( n^2 + 1 ) / 2
		s = n(n^2 + 1) / 2
		n(n^2+1)/2 = n(n^2+1)/2
		proof done
	b
		1. create a list from 1 to n^2
		2. create new list, permutations
		2. left = 0, right = 0
		3. permute list from 1 with left and right
		4. if left equals right, push current list into permutations
		5. else: for(i = left; i <= right; i++) {
					swap(list[left], list[i])
					jump to step 3 with left+1
					swap(list[left], list[i])
				}
		6. find the sum of the magic square by using: n(n^2+1)/2
		7. generate a magic square by filling in the square from left to right, top to bottom using the next item in permutations
		8. sum the diagonals, rows, and columns and compare with step 3.
		9. if the comparison from step 5 is true, the square generated from step 4 is a valid permutation
		10. jump to step 4
	c
		better algorithm: https://stackoverflow.com/questions/52841191/what-is-the-optimal-way-of-generating-all-possible-3x3-magic-squares
	d	
		For both my algorithm and the internet's algorithm, the time it took to generate a 3x3 grid was the highest number before the timer would increase to over a minute. Another problem with both of these algorithms is that the space efficiency is really bad, meaning that I wouldn't have enough memory to generate a 4x4 grid because I would run out.
