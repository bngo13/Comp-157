1.
    a.
        n=500
        E 2i-1
        i=1
            n=499    n=499
        2 * E i    - E 1
            i=1      i=1

        2 * 501(500)/2 - 500
        =250000
    b.
        n=512
        E 2i
        i=1
            n=512
        2 * E i
            i=1
        2 * 513(512)/2
        =262656

    c.
        (n+1) - 3 + 1 = n - 3
    d.
        n+1         2
        E i     -   E i
        i=1         i=1

        (n+1)(n+2)/2 - 3

    e.
        n-1        -1
        E i(i+1) - E i(i+1)
        i=1        i=1

        n-1     n-1   -1      -1
        E i^2 + E i - E i^2 - E i
        i=1     i=1   i=1     i=1

        (n-1)(n)(2n-1)/6 + (n-1)(n)/2 - (-2)(-1)(-2-1)/6 - (-2)(-1)/2
        =(n-1)n(2n-1)/6 + n(n-1)/2
    f.
        n-1
        E 3^(j+1)
        j=0

        (1-3^(n))/(1-3)
        -(1-3^n)/2
    g.
        n     n
        E i * E j
        i=1   j=1
        n       n
        E 2in - E i
        i=1     i=1
           n
        2n*E i - (n)(n+1)/2
           i=1
        2n(n)(n+1)/2 - n(n+1)/2

        n^3 + n^2 - n(n+1)/2
    h
        n
        E 1/(i)(i+1)
        i=1

        n/(n+1)
2.
    a.
        i^4 + 2i^2 + 1 = (n-1)^4 + 2(n-1)^2 + 1
        O(n^4)
    b.
        lg i^2 = 2 log i = 2 log (n-1)
        O(log(n^2))
    c.
        (n + 1)2^(n-1)
        O(n * 2^n)
    d.
        Sum n-1 starting 0 = (i + i - 1) = (2i - 1) = (2(n-1) - 1) = (2n - 2 - 1) = (2n - 3)
        O(n)
5.
    a.
        it computes the distance between the biggest and smallest numbers in an array
    b.
        it's basic operation is the comparison
    c.
        this basic operation is being executed (n-2) times twice because of the two comparisons, making it 2(n-2) times (n-2 because the i starts at 1 and not 0)
    d.
        it's efficiency class is O(n^2) because it has to reloop through the array n-1 amount of times, making it n*n = n^2
    e.
        sorting the array would be the best course of action here. There are sorting algorithms such as the block sort that would be stable and in-place while giving an efficiency of nlogn in worst case and n in best case. After doing this, a simple calculation of a[n-1] - a[0] is needed to calculate the difference, essentially making the efficiency class go from an O(n^2) to a O(nlogn)


