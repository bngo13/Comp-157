1.
    a.
        1 | x(n) = x(n-1) + 5(1)               | x(n) - 5 = x(n-2) + 5
        2 | x(n) = x(n-2) + 5(2)              | x(n) - 10 = x(n-3) + 10
        3 | x(n) = x(n-3) + 5(4)              | x(n) - 20 = x(n-3-1) + 20
        4 | x(n) = x(n-4) + 5(8)
        x(n) = x(n-k) + 5(2^(k-1))

        k=n-1

        x(n-n+1) + 5(2^(n-1-1))
        x(1) + 5(2^(n-2))
        5*2^(n-2)

    b.
        1 | x(n) = 3x(n-1)          | x(n-1) = 3x(n-2) x(n-1)=x(n)/3 x(n)/3 = 3x(n-2)
        2 | x(n) = 9x(n-2)          | x(n-2) = 9x(n-3) x(n-2) = x(n)/9 x(n)/9 = 9x(n-3)
        3 | x(n) = 81x(n-3)
        x(n) = 3^k x(n-k)
        k = n-1

        3^(n-1) * x(n-n+1)
        3^(n-1) * 4

    c.
        1 | x(1) = x(1-1) + 1 = 1
        2 | x(2) = x(2-1) + 2 = 3
        3 | x(3) = x(3-1) + 3 = 6
        4 | x(4) = x(4-1) + 4 = 10

        1 3 6 10
         2 3 4
          1 1
        x(n) = n(n+1) / 2

    d.
        1 | x(2) = 1 + 2 = 3
        2 | x(4) = 3 + 4 = 7
        3 | x(8) = 7 + 8 = 15
        4 | x(16) = 15 + 16 = 31
        5 | x(32) = 31 + 32 = 63
        6 | x(64) = 63 + 64 = 127

        2 * 2 - 1 = 3
        4 * 2 - 1 = 7
        8 * 2 - 1 = 15

        2n - 1
    e.
        1 | x(3) + 1 = 2
        2 | x(9) + 1 = 3
        3 | x(27)+ 1 = 4

        3^k = k+1
        log(3)/log(3) = 1
        log(3*k)/log(3) = k

        log(3n)/log(3)
8.
    a.
        computes the minimum in the array
    b.
        (n/2) + 1
9.
    a.
        A[5,6,7,3,2,4,1,0,9,8]
        t1 = 2 t2 = 0
        t1 !<= t2 -> t2 1

        0 | A[5,6,7,3,2] t1 = 5 t2 = 2
        t1 !<= t2 -> t2 1
        1 | A[5,6,7] t1 = 5 t2 = 7
        t2 <= t2 -> t1 1
        2 | A[5,6] t1 = 5 t2 = 6
        t1 <= t2 -> t1 1
        3 | A[3,2] t2 = 3 t2 = 2
        t2 !<=t2 -> t2 1

        4 | A[4,1,0,9,8] t1 = 0 t2 = 8
        t1 < t2 -> t1 1
        5 | A[4,1,0] t1 = 1 t2 = 0
        t1 !<= t2 -> t2 1
        6 | A[4,1] t1 = 4 t2 = 1
        t1 !<=t2 -> t2 1
        7 | A[9,8] t1 = 9 t2 = 8
        t1 !<= t2 -> t2 1

        amount of comparisons is 9. Input size is 10. n-1
    b.
        For array lengths smaller than 4, the second algorithm is more efficient, since it takes less comparisons to actually get a result. However for lengths higher than 4, the first algorithm is more efficient as it has an overall lower amount of comparisons to deal with.
