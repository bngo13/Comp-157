3
    a
        h = elements in heap
        Minimum (1 on the bottom row): 2^h

        Maximum (last level is completely full): 2^(h+1) - 1
    b
        Each layer creates a 2x increase in nodes compared to the previous layer. This means the function is x(n) = x(n/2) since the heap will keep multiplying until n becomes 0

        x(n) = x(n/2) + 1
        x(1) = 0
        n = 2^k

        1 = 2^0, k=0

        x(2^k) = x(2^(k-1)) + 1

        x(2^k-1) - 1 = x(2^(k-2)) + 1
        x(2^k) = x(2^(k-2)) + 2

        x(2^k-1) - 1 = x(2^(k-3)) + 2
        x(2^k) = x(2^(k-3)) + 3

        x(2^k) = x(2^(k-i)) + i

        k-i = 0, i = k

        x(2^k) = x(2^(k-k)) + k
        x(2^k) = x(2^0) + k
        x(2^k) = 0 + k

        k = log_2(n)

        x(n) = log_2(n)
