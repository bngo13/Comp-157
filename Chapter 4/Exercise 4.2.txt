1.
    Input: arr[n]

    START(arr[n])
    i = ceiling(n / 3)

    arr1 = arr[0, i]
    arr2 = arr[i+1, 2i]
    arr3 = arr[2i+1, n]

    saveArr = nothing

    if arr1 > arr2 then
        saveArr = arr2
    else if arr2 > arr1 then
        saveArr = arr1
    else
        saveArr = arr3

    if length(saveArr) = 1
        return saveArr

    START(saveArr)

2.
    x(1) = 1
    x(n) = x(n/3) + 3

    n = 3^k
    1 = 3^k
    k = 0
    x(3^(k=0)) = 1

    x(3^k) = x(3^(k-1)) + 3                 x(3^(k-1)) = x(3^k) - 3

    x(3^(k-1)) = x(3^(k-2)) + 3
    x(3^k) - 3 = x(3^(k-2)) + 3
    x(3^k) = x(3^(k-2)) + 6

    x(3^(k-1)) = x(3^(k-3)) + 6
    x(3^k) - 3 = x(3^(k-3)) + 6
    x(3^k) = x(3^(k-2)) + 9

    x(3^(k-1)) = x(3^(k-4)) + 9
    x(3^k) - 3 = x(3^(k-4)) + 9
    x(3^k) = x(3^(k-2)) + 12

    x(3^k) = x(3^(k-i)) + 3i
    k-i = 0
    i=k

    x(3^k) = x(3^(k-k)) + 3k
    x(3^k) = x(3^0) + 3k
    x(3^k) = 1 + 3k

    n = 3^k
    log_3(n) = k

    x(n) = 1 + 3log_3(n)

    x(n) Ɛ Θ(log(n))

3.
    Compare log_3(n) and log_2(n)

    to compare log_3(n) and log_2(n), we must divide log_2(n)/log_3(n) to see how much faster

    n = 5
    log_2(n) / log_3(n) = 1.58496

    n = 10
    log_2(n) / log_3(n) = 1.58496

    n = 50
    log_2(n) / log_3(n) = 1.58496

    n = 100
    log_2(n) / log_3(n) = 1.58496

    n = 1000
    log_2(n) / log_3(n) = 1.58496

    n = 10000
    log_2(n) / log_3(n) = 1.58496

    n = 100000
    log_2(n) / log_3(n) = 1.58496

    Seems like the overall increase in performance is 1.58496

    Mathmatically:
    limit n->inf log_2(inf) / log_3(inf) -> inf

    lhospital
    (1/ln(2) * x ) / ((1 / ln(3)) * x)
    ln(3)*x / ln(2)*x
    ln(3) / ln(2)
    = 1.58496

